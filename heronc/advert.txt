Have you found Java to be too verbose, C/C++ to be too fiddly with memory or Lisp to have too many god damn parentheses?
Well fear no more! I unveil to you the greatest language ever: Heron.

It's easy to use syntax, is very speedy and is very expressful.

[b]Here are the types:[/b]

[i]STORK[/i] - a byte (char)
[i]WOODPECKER[/i] - a short (usually 16 bits)
[i]HERON [/i]- an integer (usually 32 bits)
[i]EAGLE[/i] - a long integer (usually 64 bits)
[i]PIGEON[/i] - single precision floating point number
[i]FLAMINGO [/i]- double precision floating point number
[i]EGG[/i] - void
[i]HERON BEAK[/i] - a string





[b]Hello World[/b]

[code=heron]
heronstart {
    squark("Hello World\n");
    spit POTS_AND_PANS_ARE_CLEAN;
}
[/code]
As you can see, is a curly brace language and the entry point for a heron program is enclosed in the heronstart brace. The standard output function is squark and the program is ended by spitting "POTS_AND_PANS_ARE_CLEAN".





[b]Control Structures[/b]

[u]A conditional condition:[/u]
[code=heron]
contemplate(2 heron_agreement 3) {
    squark("2 and 3 are not the same thing holy shit");
} otherwise {
    squark("2 and 3 are indeed not in agreement");
}
[/code]
The following code checks the equality of two HERON's (2 and 3), as you can see the first block is if the condition is true, and the code inside the otherwise block is if it is false. Obviously 2 and 3 are not in heron agreement so the otherwise block executes and "2 and 3 are indeed not in agreement" is printed.

[u]A loop construct:[/u]
[code=heron]
when(POTS_AND_PANS_ARE_MESSY) {
    messwithpotsandpans();
}
[/code]
The block is executed when the condition within the when parentheses is true. This example is actually an infinite loop as the pots and pans are always messy. The function messwithpotsandpans is built into the language, it should never be run by inexperienced programmers.

[u]Switch between different situations:[/u]
[code=heron]
HERON egg = 4;

lay_eggs(egg) {
   this_egg 0:
       squark("This egg is a zero!!\n");
   break;

   this_egg 1:
       squark("This egg is a one!!!!\n");
   break;

   this_egg 2:
       squark("This egg is a twoooo!!\n");
   break;

   cracked_egg:
       squark("no eggs matched :(\n");
}

[/code]
As you can see, we declare a new HERON called egg and used the lay_egg construct to choose between different egg situations. In the example, the egg has the value 4, the program will then check if it's equal to 0,1,2 using the "this_egg" blocks. If the value is not any of these, the "cracked_egg" block is executed.

[u]There are some other constructs i will not elaborate on. Please look at the compiler source to find the syntax[/u]




[b]Variables and arithmetic [/b]
As you saw in the previous example, you can make variables using the inbuilt types! For example:

[code=heron]
HERON yep;
HERON a = 3;
HERON b = 5;

HERON c = a heron_sum b;
HERON d = a heron_snatch b;
HERON e = a heron_reproduce b;

contemplate(c nonono heron_agreement d) {
    squark("c and d do not agree indeed\n");
}

[/code]
The first line shows a declaration of the variable "yep" with type HERON, the next two lines show two variables being declared and initialised, b =3, c=5.
The next set of lines speak for themselves. After executing, c = 8, d = -2 and e = 15.
The last statement looks like a normal contemplate condition, however as you can see, it contains the "nonono" keyword. This keyword negates an expression, so in this case the condition questions, "does c and d NOT agree".




[b]Functions![/b]

All functions in Heron take the basic shape:
[code=heron]
TYPE name_of_function(PARAMTYPE paramname, PARAMTYPE2 paramname2 etc etc) {
    // code goes here
    spit value to give back;
}
[/code]

So for example here is a function that finds the square of a number
[code=heron]
HERON sq(HERON x) {
    spit x heron_reproduce x;
}

heronstart {
    squark("%d\n",sq(5));
}
[/code]
The value of "x heron_reproduce x" is calculated and then spat out the function to whatever called it. In this case, it was called inside a squark call in heronstart. The value 5 was passed to the function so the result should be 25.

This works for all the types but that is beyond the scope of this tutorial.




[b]Compiler[/b]
The source code to the compiler can be found here:
https://gist.github.com/fatcookies/8260960

[u]Dependencies:[/u]
gcc (must be in /bin/ on linux based systems. gcc++ must be included in the PATH of windows based systems)

[u]How to use[/u]
[i]nameofexecutable heronsourcefile[/i]
If compiled successfully, an executable called a should be generated.


[b]The future[/b]
Thank you for reading, Heron shall rule.

rep++ to anyone that writes some programs in Heron
also, rep++ to anyone who can convert compiler into Heron Programming Language.

